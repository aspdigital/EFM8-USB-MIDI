/*******************************************************************************
 * @file descriptors.h
 * @brief USB descriptors header file.
 *******************************************************************************/

//=============================================================================
// inc/descriptors.h: generated by Hardware Configurator
//
// This file will be regenerated when saving a document. leave the sections
// inside the "$[...]" comment tags alone or they will be overwritten!
//=============================================================================
#ifndef __SILICON_LABS_DESCRIPTORS_H
#define __SILICON_LABS_DESCRIPTORS_H

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <si_toolchain.h>
#include <endian.h>
#include <stdlib.h>
#include <string.h>
#include <efm8_usb.h>
#include <usb_audio.h>
#include <usb_midi.h>

#ifdef __cplusplus
extern "C" {
#endif

// -------------------- USB Identification ------------------------------------
//
// **********
// NOTE: YOU MUST PROVIDE YOUR OWN USB VID/PID (below)
// **********
//
// Following are the definition of the USB VID and PID.  These are, by default,
// values that are assigned to Silicon Labs. These values are provided merely
// as an example. You may not use the Silicon Labs VID/PID values in your 
// product.  You must provide your own assigned VID and PID values.
//-----------------------------------------------------------------------------
// $[Vendor ID]
#define USB_VENDOR_ID                      htole16(0x14c5)
// [Vendor ID]$

// $[Product ID]
#define USB_PRODUCT_ID                     htole16(0x666)
// [Product ID]$

// $[HID Report Descriptors]
// [HID Report Descriptors]$
/*
 * This is the Configuration Descriptor.
 * Define a structure for it, then instantiate one.
 */
typedef struct {
	// Config header:
	USB_ConfigurationDescriptor_TypeDef Config_Header;
	// Audio Control I/F standard interface descriptor:
	USB_InterfaceDescriptor_TypeDef AC_Standard_IF_Desc;
	// Audio Control class-specific interface descriptor:
	USB_MIDI_CS_AC_IF_Descriptor_t AC_CS_IF_Desc;
	// MIDI Streaming standard interface descriptor:
	USB_InterfaceDescriptor_TypeDef MS_Standard_IF_Desc;
	// MIDI Streaming class-specific interface header descriptor
	USB_MIDI_CS_MS_IF_Descriptor_t MS_CS_IF_Desc;
	// MIDI JACKS for Physical Connectors.
	// Embedded MIDI IN Jack from OUT endpoint to feed physical MIDI Out jack:
	USB_MIDI_In_Jack_Descriptor_t Jack_1;
	// External MIDI OUT Jack, fed from above, this is the physical jack.
	USB_MIDI_OUT_JACK_DESCRIPTOR(1) Jack_2;
	// External MIDI IN Jack, this is the physical jack:
	USB_MIDI_In_Jack_Descriptor_t Jack_3;
	// Embedded MIDI Out Jack, feeds IN endpoint from physical MIDI In jack.
	USB_MIDI_OUT_JACK_DESCRIPTOR(1) Jack_4;
	// MIDI JACKS for internal controls.
	// Embedded MIDI IN Jack from OUT endpoint to feed controls MIDI Out jack
	USB_MIDI_In_Jack_Descriptor_t Jack_5;
	// "fake" External MIDI OUT Jack, fed from above, this is the sink for setting controls.
	USB_MIDI_OUT_JACK_DESCRIPTOR(1) Jack_6;
	// "fake" External MIDI IN Jack, this is set by knob turns and button presses
	USB_MIDI_In_Jack_Descriptor_t Jack_7;
	// Embedded MIDI Out Jack, feeds IN endpoint from knobs and buttons.
	USB_MIDI_OUT_JACK_DESCRIPTOR(1) Jack_8;
	// ENDPOINT DESCRIPTORS.
	USB_EndpointDescriptor_TypeDef InEP1_Desc;USB_MIDI_CS_STREAMING_BULK_ENDPOINT(2) InEP1_CS_Desc;
	USB_EndpointDescriptor_TypeDef OutEP1_Desc;USB_MIDI_CS_STREAMING_BULK_ENDPOINT(2) OutEP1_CS_Desc;
} USB_ConfigDesc_t;

extern SI_SEGMENT_VARIABLE(deviceDesc[], const USB_DeviceDescriptor_TypeDef, SI_SEG_CODE);
extern SI_SEGMENT_VARIABLE(configDesc[], const USB_ConfigDesc_t, SI_SEG_CODE);
extern SI_SEGMENT_VARIABLE(initstruct, const USBD_Init_TypeDef, SI_SEG_CODE);

/*
 * Define the MIDI Jacks.
 */
#define JACK1_EMBIN  0x01
#define JACK2_EXTOUT 0x02
#define JACK3_EXTIN  0x03
#define JACK4_EMBOUT 0x04
#define JACK5_EMBIN	 0x05
#define JACK6_EXTOUT 0x06
#define JACK7_EXTIN  0x07
#define JACK8_EMBOUT 0x08
#ifdef __cplusplus
}
#endif

#endif // __SILICON_LABS_DESCRIPTORS_H

